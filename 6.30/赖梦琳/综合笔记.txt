6.13
	笔记：
		1、js出现的位置
			1. js写在标签行间中
			2. 内嵌在页面中 写在一对script便签中
				只能在当前的页面中使用
			3. 外链的方式 
				创建一个js文件，通过script标签的src链接进来

		2、script标签的位置
			body的结束之前 建议放在body中
			head标签中

		3、通过js操作页面中的元素
			获取元素
				通过id获取元素 固定的方法
					document  js提供了一个操作文档的对象
					document.getElementById('id名字')
					id名字一定要加上双引号或者单引号

				调试代码
					alert() 提醒框 把要提醒的内容放在()中

		4、变量 
			1.存放一些数据的
				要使用变量之前，先要声明变量
				关键字 var
					var 变量名; 声明了变量未赋值，默认的值为undefined
					var 变量名 = 数据/值;  声明了变量并且赋值
			2.命名规则：
				组成：字母、数字_、$组合而成
					  变量名不能已数字开头

				不能是关键字和保留字
					关键字：js正在使用的单词
						var function for if break continue class ...
					保留字:js即将使用的单词
						
				命名风格：驼峰命名法
					大驼峰 多个单词组合的时候，从第一单词开始首字母大写
					小驼峰 多个单词组合的时候，从第二单词开始首字母大写

					起名字要有语义化

		5、事件
			1.交互的一瞬间产生一个事件
			2.在元素上会产生事件

		6、知识点：
			; 一条语句结束了
			= 赋值的意思 把等号右边的值赋给左边
			调试代码：
				chrome 调试工具 
					打开调试工具 f12 
					右击->检查

		7、函数：把多行代码放在函数中，形成代码块
			1.函数定义
				关键字 function
				语法： 
					function [函数名](){
						//函数体/代码块
					}
					函数名遵循变量名的命名规则
				函数声明：
					function 函数名(){
						
					}
				函数表达式
					var func = function (){

					}
				匿名函数
					function (){

					}
					直接定义匿名函数会报错
					定义匿名函数之后立马使用，不报错
						赋给一个变量
						赋值给一个事件
			2.函数调用
				只定义了函数，未执行（调用），代码块不执行
				函数只有调用一下才能使用
				调用：函数名()
			知识点：
				[] 某些情况下代表可选的意思，可以有可以没有

		8、属性：事物所具有的不可缺少的性质

			操作属性：增删改查

			对属性的读写操作
				赋值(写)：元素.属性 = 值
				取值(读)：元素.属性

				. 的 .后面跟的属性是元素原有的
				[] 的 []后面跟的属性是元素没有的

			属性名要符合变量名的命名规则

6.14
	笔记：
		1、window 浏览器窗口对象
			当页面加载完成之后，触发这个事件
			window.onload = function(){

			}

		2、流程控制语句
			if 语句
				语法：
					if(条件){
						// 代码  
						// 如果条件成立，就执行这里面的代码
					}
				需求：
					给元素添加一些样式
					如果元素没有背景颜色为红色，添加背景颜色为红色
					如果有背景颜色了，不添加
			知识点： 
				> 
				< 
				== 比较两边的值是否是相同的，如果相同，就成立；如果不相同，不成立。

			if中的条件经过内部的转换会转成true/false
				true 代表是真
				false 代表是假
				布尔值:true/false
				true和"true" 是不一样的 一个是布尔值一个是字符串
6.15
	笔记：
		1、数组 类似于有顺序的仓库
			定义数组，直接量定义数组
					var arr = []
			存值：
				存的值以逗号隔开，最后一个省略逗号
			取值：
				下标/索引值  是一个数字
				下标是从0开始的，依次数数
				数组[下标]
			数组的长度：（数组中存了多少个值）
				数组.length  
				数组的第一个值 arr[0]
				数组的最后一个值 arr[arr.length-1]

		2、++ 自增加一 
			n++ n自己给自己+1
			类似于 n = n+1

		3、-- 自减减1
			n-- n自己给自己-1
			类似于 n = n-1

6.16
	笔记：
		1、if嵌套：满足if条件进入if，再次满足if条件输出if，不满足进入else输出else；不满足第一个if条件，则进入else输出else；
			if(条件){
				if(条件){

				}else{

				}
			}else{

			}

		2、if嵌套：满足第一个if条件输出if，不满足进入第二个if，满足条件输出if，不满足则输出else；
			if(条件1){
					// 条件1成立，执行这里的代码
				}else if(条件2){
					// 条件2成立，执行这里的代码
				}else{
					// 以上都不成立，走else
				}

		3、流程控制语句：
			1.for循环  重复做一些事情	
				语法：
					for(1初始值;2条件;3自增){
						// 4循环体  把重复的代码放在这里
					}

					for(;;){
	
					}

			2.for循环的执行过程：
				1. 先执行初始值
				2. 条件是否成立
				3. 如果条件成立，执行循环体的代码
				4. 代码执行完成之后，自增
				5. 自增完成之后，
					重复步骤：2 3 4 2 3 4 2 3 4
				以上步骤中如果条件不成立，终止执行

			3.break;for循环停止	
				满足条件后，for循环停止，break后的代码，for循环均不执行；

			  continue;本次for循环停止
				满足条件后，跳过本次循环，且写在continue后的代码不执行，之后的for循环执行；

6.19
	笔记：
		1、声明元素的方式：
			1.通过class名获取元素：document.getElementsByClassName('class名字');
									元素.getElementsByClassName('class名字');

			2.通过标签获取元素：document.getElementsByTagName('类型'); 
								元素.getElementsByTagName('类型'); 

			3.通过css获取元素：document.querySelector("css选择器，例：.active"); 							只能获取当前页面符合条件的第一个元素；
								元素.querySelector("css选择器，例：.active");
							document.querySelectorAll("css选择器，例：.active"); 只能获取当前页面符合条件的所有元素；
									元素.querySelectorAll("css选择器，例：.active"); 

			4.TagName、ClassName本身可以看成是一个类数组，
				即:使用TagName、ClassName方法处理的结果：是根据其找到多个元素，组成数组对象，通过一个数组返回，所以，用的时候，需要确定其在数组中的位置，因此加下标[n];

		2、% 取模/取余 取%前后两个数相除的余数 
			判断个数是偶数还是奇数：i % 2 == 0 ：余数为零，是偶数
6.20
	笔记：
		1、this 已经定义好的变量，this的值是不固定，根据执行的环境（上下文）决定this的值
			1. 在一对script标签中，this的值为window
				在浏览器中运行，执行的环境就是浏览器，浏览器中顶级对象为window
				window 是窗口对象/顶级对象
			2. this出现在函数中
				this的值取决于函数的调用,谁调用函数this就指向谁
				a. 直接调用 this => window
				b. 事件调用 this => 触发事件的元素
			知识点：
				在一对script标签中定义的变量和函数，都会作为window的属性或方法

		2、自定义属性：元素.自定义的属性名 = 值
			系统已经定义好的属性：style className innerHTML id src href value
				只要是系统给我们提供的对象，都可以自定属性
					window 获取元素对象
			获取一个元素身上没有定义的属性，返回一个值undefined
			给元素自定义属性  获取一个元素都是一个对象、元素对象		
			对象是由多个名/值对组成的集合
				{
					key:value
				}
				key:属性名
				value: 属性值
6.21
	笔记：
		选项卡：
			 1、声明所需的变量；
			 2、建立一个for循环（当选项个数大于1的时候）；
			 3、在for循环里给元素自定义属性；用于获取当前下标；
			 4、给元素绑定需求事件，建立函数；
			 5、给当前元素赋上所需的样式；

6.22
	笔记：
		清除上一次操作
			1、声明一个变量，用来记录之前元素的下标
			2、根据相应的需求，给之前的元素清除样式
			3、根据相应的需求，给当前的元素赋上样式
			4、给声明的变量赋值，值等于当前操作的下标

6.27
	笔记：
		1. 数据类型：两大类：基本（简单）数据类型：String、Number、Boolean、Null、Undefiend
						     复合（引用）数据类型：Object

		2. 每一个数据对应的值
			基本（简单）数据类型
				String => 字符串
				Number => 数字
				Boolean => 布尔值
				Undefined => 未定义
				Null  => 空
			复合（引用）数据类型	
				Object => 对象

		3. 检测类型 typeof 
			string number boolean object undefined function

		4. 数据类型转换
			其他类型 => 数字类型
				Number()：转换为数字
				pareseInt()：转换为数字,第一个为字母，结果为NaN，否则，转换为整数，与字母停止；
				parseFloat()：转换为数字,可以转换为小数，也可以转换为整数

		5.转不成数字 NaN来表示
				数字类型
				其他的类型和自身都不行同
				参与运算都为NaN
				参与比较都是false

		6.检测是不是NaN isNaN(值)
				值是NaN，返回true
				值不是NaN，返回false

		7.转成字符串类型
			String(要转的数据)
				''+数据
					当转成字符串类型的时候，内部会调用一个方法，toString()

		8.转成布尔值
			Boolean(要转的数据)
				! 取反 
					先把数据转成布尔值，取反
				!! 转成布尔值
				那些能转成false//true太多，记false
					 '' 0 undefined null false

		9.转换分两种情况：
			1、显式类型转换
					开发者自己手动调用方法进行转化：String Number parseInt Boolean 
			2、隐式类型转换
					解析器为了运算方便，会隐式把一种类型转成另一种类型

		10.查找字符串中指定下标的字符：字符串.charAt(下标)
								
6.28
	笔记：
		一、字符串
			es6提供的
				1、`` 反引号 模板字符串（超级字符串）			
					要渲染提供的数据，
						${数据}
				2、\ 转义符
					html结构有时候也称之为模板
				备注：
					字符串一旦定义，不能更改

		二、运算符
			算术运算符
				+ 加、- 减、* 乘、/ 除、% 取模（求余数）、++、--

			赋值运算符
				=、+=、-=、*=、/=、%=

			关系运算符
				<、>、<=、>=、==、!=、===、!==
				比较后都会返回布尔值
					== 
						1.会把等号两边的值隐式转换，转成同一种类型的
						2.数字和字符串比较时候，字符串转成数字，转成相同类型后，比较值是否相同
					===
						1.先比较类型，不相同返回false
						2.类型相同，比较值
					!= 不等于
					!== 不全等于

			逻辑运算符	
				&& 与、并且
					左右两边的条件要同时满足才可以
				|| 或、
					左右两边的条件只需要满足其一就可以
				! 否 、

			三目运算符
				判断条件 ? 条件为true执行这里代码 : 条件为false执行这里代码
				条件为true，返回?后面的值
				条件为false，返回:后面值
				不要嵌套太多三目

			结合性：
				相同等级的运算符同时出现，有一个结合性来决定是从左向右元素还是从右向左运算

6.29
	笔记：
		1、函数：
			可存放多行代码，形成代码块
			是一个对象，可执行的对象
			可以作为值使用
			使用关键字 function

		2、语法：
			function [函数名](){
			
			}

		3、完整写法：
			function [函数名]([参数1,参数2,。。。。]){
				// 函数体 代码块
				[return 值]
			}
			
		4、函数定义：
			1.函数声明
				function 函数名(){

				}
				注意：函数声明必须带上函数名
			2.函数表达式：
				把函数作为值使用，赋值为变量
				var fn = function (){

				}
			3.函数调用：
					函数定义后，不会执行函数中的代码，只能调用才能执行
					函数名()
			4.调用位置：
					函数声明调用：
						可以在函数声明之前和之后都可以调用
					函数表达式调用：
						必须在赋值之后调用
			5.函数参数：
					在函数共用的时候，在调用函数的时候要执行不同的值，通过传参的形式解决

					形参
						函数定义的时候，写在小括号中
							function func([形参1,形参2]){
	
							}
						形参的命名规则，要符合变量的命名规则
						形参就是在函数的内部声明的变量,默认值为undefined
						形参只能在函数中使用
					实参
						在调用函数时，写在小括号中
						会把这个实参赋值给形参

					形参和实参是一一对应的，以逗号隔开

		5、选中文本值：select；
				用法：元素.select();

		6、表单中
			获取焦点 onfocus
				点击获取焦点
				tab一下获取焦点
				调用方法获取焦点
					foucs()
			失去焦点 onblur

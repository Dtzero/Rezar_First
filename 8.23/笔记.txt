8.23 
    笔记
        1、暂时性死区
            在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。

            不声明变量n，直接打印，会报错，解决：
            window.n;//不会报错
            type of n

            判断变量有没有定义：加window/type of
            if(type of n!='undefined'){}
            console.log(type of m)
            let m=10;
            //报错，一定要在声明之后打印，let会锁死区域，先使用type of变量就出错，加window不会；

        2、绑定this：
            改变函数this指向
                函数.call()
                函数.apply（）
                    立马执行

            不执行函数改this：

            函数.bind()
            返回新的函数，源码？？？polyfill？？？

                function bind(fn,othis){
                    function tab(){
                        fn.apply(othis)
                    }
                    return tab
                }
                function fn(){}
                var f=bind(fn,[12,2])
                f()
        3、catch语句：
            try {
        		代码块
        	}catch(error){
        		console.log(error)
        	}

         有一段代码，报错了，不影响后续代码执行

        4、字符串扩展：
            repeat（） 返回新的字符串,表示将原字符串重复n次，不能为负的参数

            miaov = miaov.repeat(3) -1-0-1特殊，不能为负的参数

            includes（）**返回布尔值，表示是否找到了参数字符串

        5、数值扩展
            Number.parseInt(), Number.parseFloat()

            ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。这样做的目的，是逐步减少全局性方法，使得语言逐步**模块化**。
            parseInt(0.1)
            模块化

        6、console.dir()可以显示一个对象所有的属性和方法。
            Number.parseInt()

        7、for of 循环 遍历器接口 
            不要用for of 循环对象，直接循环出value值，
            for in循环的是key值

        8、数组.includes() 能够找到NAN
            方法返回一个布尔值，表示某个数组是否包含给定的值
            indexOf方法，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。
        
        9、对象的扩展：
            简洁表示方法：
                ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁
                    obj{
                        a:1,
                        miaov,
                        fn(){
                        console.log(123)
                        }
                    }
                key值动态计算：
                     obj{
                        [username]:username
                    }//key值为字符串
                    
            object.is() 判断两个值是不是相同的
                Object.is(1,1)
                Object.is(NAN,NAN)//相同
                Object.is(0,-0)//不相同
                console.log(0==-0)
                console.log(0===-0)

            ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。

            ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。

            object.assign()方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。

            多个参数中，只设置其中一个时，
            当一个方法，参数可填写，有多个参数是可选的，并且没有顺序，通常是传一个对象进去，
            合并对象功能：把多个对象属性合并到第一个对象上，返回值目标对象
            如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。

                var target = { a: 1 };
                var source1 = { b: 2 };
                var source2 = { c: 3 };
                
                Object.assign(target, source1, source2);
                target // {a:1, b:2, c:3}
                
                typeof Object.assign(2) // "object"如果该参数不是对象，则会先转成对象，然后返回。
                Object.assign(undefined) // 报错
                Object.assign(null) // 报错。由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。
            //复制一个对象

        10、浅克隆
            如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。
            
            var obj1 = {
                a: {b: 1}，
                c:[1,2,3,4]
                };
            var obj2 = Object.assign({}, obj1);
            
            obj1.a.b = 2;
            obj1.a.c.push(100000);
            obj2.a.b // 2
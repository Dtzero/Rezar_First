8.22
 	笔记
 		1、严格模式
			"use strict"

			全局变量显式声明

			直接调用函数this指向undefined
			delete删除全局变量会报错
			对象不能有重名的属性
			函数不能有重名的参数
			对arguments做了限制
				不允许对arguments赋值
				arguments不再追踪参数的变化
			函数必须声明在顶层
			新增了保留字
				implements, interface, let, package, private, protected, public, static, yield

	       * 严格模式 "strict mode"
	       *
	       * 使用严格模式可以消除js语法上不合理，不严谨，减少怪异的行为
	       *
	       * 开启严格模式：
	       * 1. 在一对script标签的开始使用字符串 "use strict"
	       * 2. 在函数中使用字符串 'use strict'
	       *
	       * 在严格模式下，使用以下的注意点：
	       *
	       * 1. 直接调用函数，函数中的this就不指向window了，而是undefined
	       * 2. 使用call第一参数改变this指向，在es5中指向是window，在严格模式下执行传入的第一个参数
	       * 3. 形参不能重复声明，重复声明会报错
	       * 4. arguments不能追踪变化
	       * 5. 不允许对arguments赋值
	       * 5. 声明变量必须显式的使用var来声明变量，不是用var回报错
	       * 6. 试图用delete删除变量会报错
	       * 7. 函数声明必须在顶层或函数作用域中，在非函数的代码块中会报错
	       *
	       * 参考：http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html
	       * https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode

		2、箭头函数
			函数形式：
				let 变量 = (形参,形参) => {return 形参-形参};
				let 变量 = (形参,形参) => 形参*形参;
				let 变量 = 形参 => 形参;
				即：大括号可有可无，小括号有两个以上形参时，需加上。
			1. 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
			2. 不可以使用arguments对象，该对象在函数体内不存在

			rest参数
				...变量名
				
				用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。

		3、变量解构赋值
			let obj = {
				a:1,
				b:2,
				c:3,
				miaov:"ketang"
			}
			let {miaov=1} = obj; 
			console.log(miaov);//结果为ketang

			// 数组的结构赋值
			let arr =[1,2,3,4];
			// 设置默认值
			let [a,b,c,d,e='miaov']  = arr;
			console.log(e);//结果为miaov

			即：如果变量原来就有值，不能改变其值；若没有，则给变量设置默认值

		4、...数组
		 		展开运算符
			let arr1 = [1,2,3];
			let arr2 = [4,5,6];
			let arr3 = [...arr1,...arr2];
			console.log(arr3);
			//求数组的最大值
			var arr = [3,6,40,0,2,8,23,1];
			console.log(Math.max(...arr));

		5、Object.defineProperty():会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象
		Object.defineProperty(obj, prop, descriptor)
		
		var obj = {
			a:1
		};
		Object.defineProperty(obj,'ketang',{
			value:'123',    // 属性对应的值 默认为undefined
			writable:true,	// 是否可被改写，true，可以，false不可以，默认为false
			enumerable: true // 是否可被枚举 true，可以，false不可以，默认为false	
			configurable:true  // 是否可被删除，true可以，false不可以，默认为false
		});